# Generated by Django 2.2 on 2019-04-11 19:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccRegNum',
            fields=[
                ('account_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=32)),
                ('index', models.PositiveIntegerField()),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'acc_reg_num',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccRegStr',
            fields=[
                ('account_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=32)),
                ('index', models.PositiveIntegerField()),
                ('value', models.CharField(max_length=254)),
            ],
            options={
                'db_table': 'acc_reg_str',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('char_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('id', models.BigIntegerField()),
                ('count1', models.PositiveIntegerField()),
                ('count2', models.PositiveIntegerField()),
                ('count3', models.PositiveIntegerField()),
                ('count4', models.PositiveIntegerField()),
                ('count5', models.PositiveIntegerField()),
                ('count6', models.PositiveIntegerField()),
                ('count7', models.PositiveIntegerField()),
                ('count8', models.PositiveIntegerField()),
                ('count9', models.PositiveIntegerField()),
                ('count10', models.PositiveIntegerField()),
                ('completed', models.DateTimeField(blank=True, null=True)),
                ('rewarded', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'achievement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Atcommandlog',
            fields=[
                ('atcommand_id', models.AutoField(primary_key=True, serialize=False)),
                ('atcommand_date', models.DateTimeField()),
                ('account_id', models.PositiveIntegerField()),
                ('char_id', models.PositiveIntegerField()),
                ('char_name', models.CharField(max_length=25)),
                ('map', models.CharField(max_length=11)),
                ('command', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'atcommandlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Auction',
            fields=[
                ('auction_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('seller_id', models.PositiveIntegerField()),
                ('seller_name', models.CharField(max_length=30)),
                ('buyer_id', models.PositiveIntegerField()),
                ('buyer_name', models.CharField(max_length=30)),
                ('price', models.PositiveIntegerField()),
                ('buynow', models.PositiveIntegerField()),
                ('hours', models.SmallIntegerField()),
                ('timestamp', models.PositiveIntegerField()),
                ('nameid', models.PositiveSmallIntegerField()),
                ('item_name', models.CharField(max_length=50)),
                ('type', models.SmallIntegerField()),
                ('refine', models.PositiveIntegerField()),
                ('attribute', models.PositiveIntegerField()),
                ('card0', models.PositiveSmallIntegerField()),
                ('card1', models.PositiveSmallIntegerField()),
                ('card2', models.PositiveSmallIntegerField()),
                ('card3', models.PositiveSmallIntegerField()),
                ('option_id0', models.SmallIntegerField()),
                ('option_val0', models.SmallIntegerField()),
                ('option_parm0', models.IntegerField()),
                ('option_id1', models.SmallIntegerField()),
                ('option_val1', models.SmallIntegerField()),
                ('option_parm1', models.IntegerField()),
                ('option_id2', models.SmallIntegerField()),
                ('option_val2', models.SmallIntegerField()),
                ('option_parm2', models.IntegerField()),
                ('option_id3', models.SmallIntegerField()),
                ('option_val3', models.SmallIntegerField()),
                ('option_parm3', models.IntegerField()),
                ('option_id4', models.SmallIntegerField()),
                ('option_val4', models.SmallIntegerField()),
                ('option_parm4', models.IntegerField()),
                ('unique_id', models.BigIntegerField()),
            ],
            options={
                'db_table': 'auction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BonusScript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('char_id', models.PositiveIntegerField()),
                ('script', models.TextField()),
                ('tick', models.BigIntegerField()),
                ('flag', models.PositiveSmallIntegerField()),
                ('type', models.PositiveIntegerField()),
                ('icon', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'bonus_script',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Branchlog',
            fields=[
                ('branch_id', models.AutoField(primary_key=True, serialize=False)),
                ('branch_date', models.DateTimeField()),
                ('account_id', models.IntegerField()),
                ('char_id', models.IntegerField()),
                ('char_name', models.CharField(max_length=25)),
                ('map', models.CharField(max_length=11)),
            ],
            options={
                'db_table': 'branchlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BuyingstoreItems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buyingstore_id', models.PositiveIntegerField()),
                ('index', models.PositiveSmallIntegerField()),
                ('item_id', models.PositiveIntegerField()),
                ('amount', models.PositiveSmallIntegerField()),
                ('price', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'buyingstore_items',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Buyingstores',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('account_id', models.PositiveIntegerField()),
                ('char_id', models.PositiveIntegerField()),
                ('sex', models.CharField(max_length=1)),
                ('map', models.CharField(max_length=20)),
                ('x', models.PositiveSmallIntegerField()),
                ('y', models.PositiveSmallIntegerField()),
                ('title', models.CharField(max_length=80)),
                ('limit', models.PositiveIntegerField()),
                ('body_direction', models.CharField(max_length=1)),
                ('head_direction', models.CharField(max_length=1)),
                ('sit', models.CharField(max_length=1)),
                ('autotrade', models.IntegerField()),
            ],
            options={
                'db_table': 'buyingstores',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CartInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('char_id', models.IntegerField()),
                ('nameid', models.PositiveSmallIntegerField()),
                ('amount', models.IntegerField()),
                ('equip', models.PositiveIntegerField()),
                ('identify', models.SmallIntegerField()),
                ('refine', models.PositiveIntegerField()),
                ('attribute', models.IntegerField()),
                ('card0', models.PositiveSmallIntegerField()),
                ('card1', models.PositiveSmallIntegerField()),
                ('card2', models.PositiveSmallIntegerField()),
                ('card3', models.PositiveSmallIntegerField()),
                ('option_id0', models.SmallIntegerField()),
                ('option_val0', models.SmallIntegerField()),
                ('option_parm0', models.IntegerField()),
                ('option_id1', models.SmallIntegerField()),
                ('option_val1', models.SmallIntegerField()),
                ('option_parm1', models.IntegerField()),
                ('option_id2', models.SmallIntegerField()),
                ('option_val2', models.SmallIntegerField()),
                ('option_parm2', models.IntegerField()),
                ('option_id3', models.SmallIntegerField()),
                ('option_val3', models.SmallIntegerField()),
                ('option_parm3', models.IntegerField()),
                ('option_id4', models.SmallIntegerField()),
                ('option_val4', models.SmallIntegerField()),
                ('option_parm4', models.IntegerField()),
                ('expire_time', models.PositiveIntegerField()),
                ('bound', models.PositiveIntegerField()),
                ('unique_id', models.BigIntegerField()),
            ],
            options={
                'db_table': 'cart_inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cashlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('char_id', models.IntegerField()),
                ('type', models.CharField(max_length=1)),
                ('cash_type', models.CharField(max_length=1)),
                ('amount', models.IntegerField()),
                ('map', models.CharField(max_length=11)),
            ],
            options={
                'db_table': 'cashlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Char',
            fields=[
                ('char_id', models.AutoField(primary_key=True, serialize=False)),
                ('account_id', models.PositiveIntegerField()),
                ('char_num', models.IntegerField()),
                ('name', models.CharField(max_length=30, unique=True)),
                ('class_field', models.PositiveSmallIntegerField(db_column='class')),
                ('base_level', models.PositiveSmallIntegerField()),
                ('job_level', models.PositiveSmallIntegerField()),
                ('base_exp', models.BigIntegerField()),
                ('job_exp', models.BigIntegerField()),
                ('zeny', models.PositiveIntegerField()),
                ('str', models.PositiveSmallIntegerField()),
                ('agi', models.PositiveSmallIntegerField()),
                ('vit', models.PositiveSmallIntegerField()),
                ('int', models.PositiveSmallIntegerField()),
                ('dex', models.PositiveSmallIntegerField()),
                ('luk', models.PositiveSmallIntegerField()),
                ('max_hp', models.PositiveIntegerField()),
                ('hp', models.PositiveIntegerField()),
                ('max_sp', models.PositiveIntegerField()),
                ('sp', models.PositiveIntegerField()),
                ('status_point', models.PositiveIntegerField()),
                ('skill_point', models.PositiveIntegerField()),
                ('option', models.IntegerField()),
                ('karma', models.IntegerField()),
                ('manner', models.SmallIntegerField()),
                ('party_id', models.PositiveIntegerField()),
                ('guild_id', models.PositiveIntegerField()),
                ('pet_id', models.PositiveIntegerField()),
                ('homun_id', models.PositiveIntegerField()),
                ('elemental_id', models.PositiveIntegerField()),
                ('hair', models.PositiveIntegerField()),
                ('hair_color', models.PositiveSmallIntegerField()),
                ('clothes_color', models.PositiveSmallIntegerField()),
                ('body', models.PositiveSmallIntegerField()),
                ('weapon', models.PositiveSmallIntegerField()),
                ('shield', models.PositiveSmallIntegerField()),
                ('head_top', models.PositiveSmallIntegerField()),
                ('head_mid', models.PositiveSmallIntegerField()),
                ('head_bottom', models.PositiveSmallIntegerField()),
                ('robe', models.PositiveSmallIntegerField()),
                ('last_map', models.CharField(max_length=11)),
                ('last_x', models.PositiveSmallIntegerField()),
                ('last_y', models.PositiveSmallIntegerField()),
                ('save_map', models.CharField(max_length=11)),
                ('save_x', models.PositiveSmallIntegerField()),
                ('save_y', models.PositiveSmallIntegerField()),
                ('partner_id', models.PositiveIntegerField()),
                ('online', models.IntegerField()),
                ('father', models.PositiveIntegerField()),
                ('mother', models.PositiveIntegerField()),
                ('child', models.PositiveIntegerField()),
                ('fame', models.PositiveIntegerField()),
                ('rename', models.PositiveSmallIntegerField()),
                ('delete_date', models.PositiveIntegerField()),
                ('moves', models.PositiveIntegerField()),
                ('unban_time', models.PositiveIntegerField()),
                ('font', models.PositiveIntegerField()),
                ('uniqueitem_counter', models.PositiveIntegerField()),
                ('sex', models.CharField(max_length=1)),
                ('hotkey_rowshift', models.PositiveIntegerField()),
                ('clan_id', models.PositiveIntegerField()),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('title_id', models.PositiveIntegerField()),
                ('show_equip', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'char',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Charlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('char_msg', models.CharField(max_length=255)),
                ('account_id', models.IntegerField()),
                ('char_num', models.IntegerField()),
                ('name', models.CharField(max_length=23)),
                ('str', models.PositiveIntegerField()),
                ('agi', models.PositiveIntegerField()),
                ('vit', models.PositiveIntegerField()),
                ('int', models.PositiveIntegerField()),
                ('dex', models.PositiveIntegerField()),
                ('luk', models.PositiveIntegerField()),
                ('hair', models.IntegerField()),
                ('hair_color', models.IntegerField()),
            ],
            options={
                'db_table': 'charlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharRegNum',
            fields=[
                ('char_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=32)),
                ('index', models.PositiveIntegerField()),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'char_reg_num',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharRegStr',
            fields=[
                ('char_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=32)),
                ('index', models.PositiveIntegerField()),
                ('value', models.CharField(max_length=254)),
            ],
            options={
                'db_table': 'char_reg_str',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chatlog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField()),
                ('type', models.CharField(max_length=1)),
                ('type_id', models.IntegerField()),
                ('src_charid', models.IntegerField()),
                ('src_accountid', models.IntegerField()),
                ('src_map', models.CharField(max_length=11)),
                ('src_map_x', models.SmallIntegerField()),
                ('src_map_y', models.SmallIntegerField()),
                ('dst_charname', models.CharField(max_length=25)),
                ('message', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'chatlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Clan',
            fields=[
                ('clan_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=24)),
                ('master', models.CharField(max_length=24)),
                ('mapname', models.CharField(max_length=24)),
                ('max_member', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'clan',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanAlliance',
            fields=[
                ('clan_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('opposition', models.PositiveIntegerField()),
                ('alliance_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'clan_alliance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DbRoulette',
            fields=[
                ('index', models.IntegerField(primary_key=True, serialize=False)),
                ('level', models.PositiveSmallIntegerField()),
                ('item_id', models.PositiveSmallIntegerField()),
                ('amount', models.PositiveSmallIntegerField()),
                ('flag', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'db_roulette',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Elemental',
            fields=[
                ('ele_id', models.AutoField(primary_key=True, serialize=False)),
                ('char_id', models.IntegerField()),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('mode', models.PositiveIntegerField()),
                ('hp', models.PositiveIntegerField()),
                ('sp', models.PositiveIntegerField()),
                ('max_hp', models.PositiveIntegerField()),
                ('max_sp', models.PositiveIntegerField()),
                ('atk1', models.PositiveIntegerField()),
                ('atk2', models.PositiveIntegerField()),
                ('matk', models.PositiveIntegerField()),
                ('aspd', models.PositiveSmallIntegerField()),
                ('def_field', models.PositiveSmallIntegerField(db_column='def')),
                ('mdef', models.PositiveSmallIntegerField()),
                ('flee', models.PositiveSmallIntegerField()),
                ('hit', models.PositiveSmallIntegerField()),
                ('life_time', models.BigIntegerField()),
            ],
            options={
                'db_table': 'elemental',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Feedinglog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('char_id', models.IntegerField()),
                ('target_id', models.IntegerField()),
                ('target_class', models.SmallIntegerField()),
                ('type', models.CharField(max_length=1)),
                ('intimacy', models.PositiveIntegerField()),
                ('item_id', models.PositiveSmallIntegerField()),
                ('map', models.CharField(max_length=11)),
                ('x', models.PositiveSmallIntegerField()),
                ('y', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'feedinglog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Friends',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('char_id', models.IntegerField()),
                ('friend_account', models.IntegerField()),
                ('friend_id', models.IntegerField()),
            ],
            options={
                'db_table': 'friends',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalAccRegNum',
            fields=[
                ('account_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=32)),
                ('index', models.PositiveIntegerField()),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'global_acc_reg_num',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalAccRegStr',
            fields=[
                ('account_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=32)),
                ('index', models.PositiveIntegerField()),
                ('value', models.CharField(max_length=254)),
            ],
            options={
                'db_table': 'global_acc_reg_str',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Guild',
            fields=[
                ('guild_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=24)),
                ('char_id', models.PositiveIntegerField()),
                ('master', models.CharField(max_length=24)),
                ('guild_lv', models.PositiveIntegerField()),
                ('connect_member', models.PositiveIntegerField()),
                ('max_member', models.PositiveIntegerField()),
                ('average_lv', models.PositiveSmallIntegerField()),
                ('exp', models.BigIntegerField()),
                ('next_exp', models.PositiveIntegerField()),
                ('skill_point', models.PositiveIntegerField()),
                ('mes1', models.CharField(max_length=60)),
                ('mes2', models.CharField(max_length=120)),
                ('emblem_len', models.PositiveIntegerField()),
                ('emblem_id', models.PositiveIntegerField()),
                ('emblem_data', models.TextField(blank=True, null=True)),
                ('last_master_change', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'guild',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildAlliance',
            fields=[
                ('guild_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('opposition', models.PositiveIntegerField()),
                ('alliance_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'guild_alliance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildCastle',
            fields=[
                ('castle_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('guild_id', models.PositiveIntegerField()),
                ('economy', models.PositiveIntegerField()),
                ('defense', models.PositiveIntegerField()),
                ('triggere', models.PositiveIntegerField(db_column='triggerE')),
                ('triggerd', models.PositiveIntegerField(db_column='triggerD')),
                ('nexttime', models.PositiveIntegerField(db_column='nextTime')),
                ('paytime', models.PositiveIntegerField(db_column='payTime')),
                ('createtime', models.PositiveIntegerField(db_column='createTime')),
                ('visiblec', models.PositiveIntegerField(db_column='visibleC')),
                ('visibleg0', models.PositiveIntegerField(db_column='visibleG0')),
                ('visibleg1', models.PositiveIntegerField(db_column='visibleG1')),
                ('visibleg2', models.PositiveIntegerField(db_column='visibleG2')),
                ('visibleg3', models.PositiveIntegerField(db_column='visibleG3')),
                ('visibleg4', models.PositiveIntegerField(db_column='visibleG4')),
                ('visibleg5', models.PositiveIntegerField(db_column='visibleG5')),
                ('visibleg6', models.PositiveIntegerField(db_column='visibleG6')),
                ('visibleg7', models.PositiveIntegerField(db_column='visibleG7')),
            ],
            options={
                'db_table': 'guild_castle',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildExpulsion',
            fields=[
                ('guild_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('account_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=24)),
                ('mes', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'guild_expulsion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildMember',
            fields=[
                ('guild_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('account_id', models.PositiveIntegerField()),
                ('char_id', models.PositiveIntegerField()),
                ('hair', models.PositiveIntegerField()),
                ('hair_color', models.PositiveSmallIntegerField()),
                ('gender', models.PositiveIntegerField()),
                ('class_field', models.PositiveSmallIntegerField(db_column='class')),
                ('lv', models.PositiveSmallIntegerField()),
                ('exp', models.BigIntegerField()),
                ('exp_payper', models.PositiveIntegerField()),
                ('online', models.PositiveIntegerField()),
                ('position', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'guild_member',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildPosition',
            fields=[
                ('guild_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('position', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=24)),
                ('mode', models.PositiveSmallIntegerField()),
                ('exp_mode', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'guild_position',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildSkill',
            fields=[
                ('guild_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('id', models.PositiveSmallIntegerField()),
                ('lv', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'guild_skill',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guild_id', models.PositiveIntegerField()),
                ('nameid', models.PositiveSmallIntegerField()),
                ('amount', models.PositiveIntegerField()),
                ('equip', models.PositiveIntegerField()),
                ('identify', models.PositiveSmallIntegerField()),
                ('refine', models.PositiveIntegerField()),
                ('attribute', models.PositiveIntegerField()),
                ('card0', models.PositiveSmallIntegerField()),
                ('card1', models.PositiveSmallIntegerField()),
                ('card2', models.PositiveSmallIntegerField()),
                ('card3', models.PositiveSmallIntegerField()),
                ('option_id0', models.SmallIntegerField()),
                ('option_val0', models.SmallIntegerField()),
                ('option_parm0', models.IntegerField()),
                ('option_id1', models.SmallIntegerField()),
                ('option_val1', models.SmallIntegerField()),
                ('option_parm1', models.IntegerField()),
                ('option_id2', models.SmallIntegerField()),
                ('option_val2', models.SmallIntegerField()),
                ('option_parm2', models.IntegerField()),
                ('option_id3', models.SmallIntegerField()),
                ('option_val3', models.SmallIntegerField()),
                ('option_parm3', models.IntegerField()),
                ('option_id4', models.SmallIntegerField()),
                ('option_val4', models.SmallIntegerField()),
                ('option_parm4', models.IntegerField()),
                ('expire_time', models.PositiveIntegerField()),
                ('bound', models.PositiveIntegerField()),
                ('unique_id', models.BigIntegerField()),
            ],
            options={
                'db_table': 'guild_storage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildStorageLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guild_id', models.PositiveIntegerField()),
                ('time', models.DateTimeField()),
                ('char_id', models.IntegerField()),
                ('name', models.CharField(max_length=24)),
                ('nameid', models.PositiveSmallIntegerField()),
                ('amount', models.IntegerField()),
                ('identify', models.SmallIntegerField()),
                ('refine', models.PositiveIntegerField()),
                ('attribute', models.PositiveIntegerField()),
                ('card0', models.PositiveSmallIntegerField()),
                ('card1', models.PositiveSmallIntegerField()),
                ('card2', models.PositiveSmallIntegerField()),
                ('card3', models.PositiveSmallIntegerField()),
                ('option_id0', models.SmallIntegerField()),
                ('option_val0', models.SmallIntegerField()),
                ('option_parm0', models.IntegerField()),
                ('option_id1', models.SmallIntegerField()),
                ('option_val1', models.SmallIntegerField()),
                ('option_parm1', models.IntegerField()),
                ('option_id2', models.SmallIntegerField()),
                ('option_val2', models.SmallIntegerField()),
                ('option_parm2', models.IntegerField()),
                ('option_id3', models.SmallIntegerField()),
                ('option_val3', models.SmallIntegerField()),
                ('option_parm3', models.IntegerField()),
                ('option_id4', models.SmallIntegerField()),
                ('option_val4', models.SmallIntegerField()),
                ('option_parm4', models.IntegerField()),
                ('expire_time', models.PositiveIntegerField()),
                ('unique_id', models.BigIntegerField()),
                ('bound', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'guild_storage_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Homunculus',
            fields=[
                ('homun_id', models.AutoField(primary_key=True, serialize=False)),
                ('char_id', models.IntegerField()),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('prev_class', models.IntegerField()),
                ('name', models.CharField(max_length=24)),
                ('level', models.SmallIntegerField()),
                ('exp', models.BigIntegerField()),
                ('intimacy', models.IntegerField()),
                ('hunger', models.SmallIntegerField()),
                ('str', models.PositiveSmallIntegerField()),
                ('agi', models.PositiveSmallIntegerField()),
                ('vit', models.PositiveSmallIntegerField()),
                ('int', models.PositiveSmallIntegerField()),
                ('dex', models.PositiveSmallIntegerField()),
                ('luk', models.PositiveSmallIntegerField()),
                ('hp', models.PositiveIntegerField()),
                ('max_hp', models.PositiveIntegerField()),
                ('sp', models.IntegerField()),
                ('max_sp', models.IntegerField()),
                ('skill_point', models.PositiveSmallIntegerField()),
                ('alive', models.IntegerField()),
                ('rename_flag', models.IntegerField()),
                ('vaporize', models.IntegerField()),
                ('autofeed', models.IntegerField()),
            ],
            options={
                'db_table': 'homunculus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hotkey',
            fields=[
                ('char_id', models.IntegerField(primary_key=True, serialize=False)),
                ('hotkey', models.PositiveIntegerField()),
                ('type', models.PositiveIntegerField()),
                ('itemskill_id', models.PositiveIntegerField()),
                ('skill_lvl', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'hotkey',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Interlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('log', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'interlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Interreg',
            fields=[
                ('varname', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'interreg',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('char_id', models.PositiveIntegerField()),
                ('nameid', models.PositiveSmallIntegerField()),
                ('amount', models.PositiveIntegerField()),
                ('equip', models.PositiveIntegerField()),
                ('identify', models.SmallIntegerField()),
                ('refine', models.PositiveIntegerField()),
                ('attribute', models.PositiveIntegerField()),
                ('card0', models.PositiveSmallIntegerField()),
                ('card1', models.PositiveSmallIntegerField()),
                ('card2', models.PositiveSmallIntegerField()),
                ('card3', models.PositiveSmallIntegerField()),
                ('option_id0', models.SmallIntegerField()),
                ('option_val0', models.SmallIntegerField()),
                ('option_parm0', models.IntegerField()),
                ('option_id1', models.SmallIntegerField()),
                ('option_val1', models.SmallIntegerField()),
                ('option_parm1', models.IntegerField()),
                ('option_id2', models.SmallIntegerField()),
                ('option_val2', models.SmallIntegerField()),
                ('option_parm2', models.IntegerField()),
                ('option_id3', models.SmallIntegerField()),
                ('option_val3', models.SmallIntegerField()),
                ('option_parm3', models.IntegerField()),
                ('option_id4', models.SmallIntegerField()),
                ('option_val4', models.SmallIntegerField()),
                ('option_parm4', models.IntegerField()),
                ('expire_time', models.PositiveIntegerField()),
                ('favorite', models.PositiveIntegerField()),
                ('bound', models.PositiveIntegerField()),
                ('unique_id', models.BigIntegerField()),
                ('equip_switch', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ipbanlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list', models.CharField(max_length=255)),
                ('btime', models.DateTimeField()),
                ('rtime', models.DateTimeField()),
                ('reason', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'ipbanlist',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemCashDb',
            fields=[
                ('tab', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('item_id', models.PositiveSmallIntegerField()),
                ('price', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'item_cash_db',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemCashDb2',
            fields=[
                ('tab', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('item_id', models.PositiveSmallIntegerField()),
                ('price', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'item_cash_db2',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemDb',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name_english', models.CharField(max_length=50, unique=True)),
                ('name_japanese', models.CharField(max_length=50)),
                ('type', models.PositiveIntegerField()),
                ('price_buy', models.PositiveIntegerField(blank=True, null=True)),
                ('price_sell', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.PositiveSmallIntegerField()),
                ('attack', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('defence', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('range', models.PositiveIntegerField(blank=True, null=True)),
                ('slots', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_jobs', models.BigIntegerField(blank=True, null=True)),
                ('equip_upper', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_genders', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_locations', models.PositiveIntegerField(blank=True, null=True)),
                ('weapon_level', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_level', models.PositiveIntegerField(blank=True, null=True)),
                ('refineable', models.PositiveIntegerField(blank=True, null=True)),
                ('view', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('script', models.TextField(blank=True, null=True)),
                ('equip_script', models.TextField(blank=True, null=True)),
                ('unequip_script', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'item_db',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemDb2',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name_english', models.CharField(max_length=50, unique=True)),
                ('name_japanese', models.CharField(max_length=50)),
                ('type', models.PositiveIntegerField()),
                ('price_buy', models.PositiveIntegerField(blank=True, null=True)),
                ('price_sell', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.PositiveSmallIntegerField()),
                ('attack', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('defence', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('range', models.PositiveIntegerField(blank=True, null=True)),
                ('slots', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_jobs', models.BigIntegerField(blank=True, null=True)),
                ('equip_upper', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_genders', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_locations', models.PositiveIntegerField(blank=True, null=True)),
                ('weapon_level', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_level', models.PositiveIntegerField(blank=True, null=True)),
                ('refineable', models.PositiveIntegerField(blank=True, null=True)),
                ('view', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('script', models.TextField(blank=True, null=True)),
                ('equip_script', models.TextField(blank=True, null=True)),
                ('unequip_script', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'item_db2',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemDb2Re',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name_english', models.CharField(max_length=50, unique=True)),
                ('name_japanese', models.CharField(max_length=50)),
                ('type', models.PositiveIntegerField()),
                ('price_buy', models.PositiveIntegerField(blank=True, null=True)),
                ('price_sell', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.PositiveSmallIntegerField()),
                ('atk_matk', models.CharField(blank=True, db_column='atk:matk', max_length=11, null=True)),
                ('defence', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('range', models.PositiveIntegerField(blank=True, null=True)),
                ('slots', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_jobs', models.BigIntegerField(blank=True, null=True)),
                ('equip_upper', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_genders', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_locations', models.PositiveIntegerField(blank=True, null=True)),
                ('weapon_level', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_level', models.CharField(blank=True, max_length=10, null=True)),
                ('refineable', models.PositiveIntegerField(blank=True, null=True)),
                ('view', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('script', models.TextField(blank=True, null=True)),
                ('equip_script', models.TextField(blank=True, null=True)),
                ('unequip_script', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'item_db2_re',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemDbRe',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name_english', models.CharField(max_length=50, unique=True)),
                ('name_japanese', models.CharField(max_length=50)),
                ('type', models.PositiveIntegerField()),
                ('price_buy', models.PositiveIntegerField(blank=True, null=True)),
                ('price_sell', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.PositiveSmallIntegerField()),
                ('atk_matk', models.CharField(blank=True, db_column='atk:matk', max_length=11, null=True)),
                ('defence', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('range', models.PositiveIntegerField(blank=True, null=True)),
                ('slots', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_jobs', models.BigIntegerField(blank=True, null=True)),
                ('equip_upper', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_genders', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_locations', models.PositiveIntegerField(blank=True, null=True)),
                ('weapon_level', models.PositiveIntegerField(blank=True, null=True)),
                ('equip_level', models.CharField(blank=True, max_length=10, null=True)),
                ('refineable', models.PositiveIntegerField(blank=True, null=True)),
                ('view', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('script', models.TextField(blank=True, null=True)),
                ('equip_script', models.TextField(blank=True, null=True)),
                ('unequip_script', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'item_db_re',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Login',
            fields=[
                ('account_id', models.AutoField(primary_key=True, serialize=False)),
                ('userid', models.CharField(max_length=23)),
                ('user_pass', models.CharField(max_length=32)),
                ('sex', models.CharField(max_length=1)),
                ('email', models.CharField(max_length=39)),
                ('group_id', models.IntegerField()),
                ('state', models.PositiveIntegerField()),
                ('unban_time', models.PositiveIntegerField()),
                ('expiration_time', models.PositiveIntegerField()),
                ('logincount', models.PositiveIntegerField()),
                ('lastlogin', models.DateTimeField(blank=True, null=True)),
                ('last_ip', models.CharField(max_length=100)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('character_slots', models.PositiveIntegerField()),
                ('pincode', models.CharField(max_length=4)),
                ('pincode_change', models.PositiveIntegerField()),
                ('vip_time', models.PositiveIntegerField()),
                ('old_group', models.IntegerField()),
            ],
            options={
                'db_table': 'login',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Loginlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('ip', models.CharField(max_length=15)),
                ('user', models.CharField(max_length=23)),
                ('rcode', models.IntegerField()),
                ('log', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'loginlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mail',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('send_name', models.CharField(max_length=30)),
                ('send_id', models.PositiveIntegerField()),
                ('dest_name', models.CharField(max_length=30)),
                ('dest_id', models.PositiveIntegerField()),
                ('title', models.CharField(max_length=45)),
                ('message', models.CharField(max_length=500)),
                ('time', models.PositiveIntegerField()),
                ('status', models.IntegerField()),
                ('zeny', models.PositiveIntegerField()),
                ('type', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'mail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MailAttachments',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('index', models.PositiveSmallIntegerField()),
                ('nameid', models.PositiveSmallIntegerField()),
                ('amount', models.PositiveIntegerField()),
                ('refine', models.PositiveIntegerField()),
                ('attribute', models.PositiveIntegerField()),
                ('identify', models.SmallIntegerField()),
                ('card0', models.PositiveSmallIntegerField()),
                ('card1', models.PositiveSmallIntegerField()),
                ('card2', models.PositiveSmallIntegerField()),
                ('card3', models.PositiveSmallIntegerField()),
                ('option_id0', models.SmallIntegerField()),
                ('option_val0', models.SmallIntegerField()),
                ('option_parm0', models.IntegerField()),
                ('option_id1', models.SmallIntegerField()),
                ('option_val1', models.SmallIntegerField()),
                ('option_parm1', models.IntegerField()),
                ('option_id2', models.SmallIntegerField()),
                ('option_val2', models.SmallIntegerField()),
                ('option_parm2', models.IntegerField()),
                ('option_id3', models.SmallIntegerField()),
                ('option_val3', models.SmallIntegerField()),
                ('option_parm3', models.IntegerField()),
                ('option_id4', models.SmallIntegerField()),
                ('option_val4', models.SmallIntegerField()),
                ('option_parm4', models.IntegerField()),
                ('unique_id', models.BigIntegerField()),
                ('bound', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mail_attachments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mapreg',
            fields=[
                ('varname', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('index', models.PositiveIntegerField()),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'mapreg',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('nameid', models.PositiveSmallIntegerField()),
                ('price', models.PositiveIntegerField()),
                ('amount', models.PositiveSmallIntegerField()),
                ('flag', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'market',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Memo',
            fields=[
                ('memo_id', models.AutoField(primary_key=True, serialize=False)),
                ('char_id', models.PositiveIntegerField()),
                ('map', models.CharField(max_length=11)),
                ('x', models.PositiveSmallIntegerField()),
                ('y', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'memo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mercenary',
            fields=[
                ('mer_id', models.AutoField(primary_key=True, serialize=False)),
                ('char_id', models.IntegerField()),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('hp', models.PositiveIntegerField()),
                ('sp', models.PositiveIntegerField()),
                ('kill_counter', models.IntegerField()),
                ('life_time', models.BigIntegerField()),
            ],
            options={
                'db_table': 'mercenary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MercenaryOwner',
            fields=[
                ('char_id', models.IntegerField(primary_key=True, serialize=False)),
                ('merc_id', models.IntegerField()),
                ('arch_calls', models.IntegerField()),
                ('arch_faith', models.IntegerField()),
                ('spear_calls', models.IntegerField()),
                ('spear_faith', models.IntegerField()),
                ('sword_calls', models.IntegerField()),
                ('sword_faith', models.IntegerField()),
            ],
            options={
                'db_table': 'mercenary_owner',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobDb',
            fields=[
                ('id', models.PositiveIntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('sprite', models.TextField(db_column='Sprite')),
                ('kname', models.TextField(db_column='kName')),
                ('iname', models.TextField(db_column='iName')),
                ('lv', models.PositiveIntegerField(db_column='LV')),
                ('hp', models.PositiveIntegerField(db_column='HP')),
                ('sp', models.PositiveIntegerField(db_column='SP')),
                ('exp', models.PositiveIntegerField(db_column='EXP')),
                ('jexp', models.PositiveIntegerField(db_column='JEXP')),
                ('range1', models.PositiveIntegerField(db_column='Range1')),
                ('atk1', models.PositiveSmallIntegerField(db_column='ATK1')),
                ('atk2', models.PositiveSmallIntegerField(db_column='ATK2')),
                ('def_field', models.PositiveSmallIntegerField(db_column='DEF')),
                ('mdef', models.PositiveSmallIntegerField(db_column='MDEF')),
                ('str', models.PositiveSmallIntegerField(db_column='STR')),
                ('agi', models.PositiveSmallIntegerField(db_column='AGI')),
                ('vit', models.PositiveSmallIntegerField(db_column='VIT')),
                ('int', models.PositiveSmallIntegerField(db_column='INT')),
                ('dex', models.PositiveSmallIntegerField(db_column='DEX')),
                ('luk', models.PositiveSmallIntegerField(db_column='LUK')),
                ('range2', models.PositiveIntegerField(db_column='Range2')),
                ('range3', models.PositiveIntegerField(db_column='Range3')),
                ('scale', models.PositiveIntegerField(db_column='Scale')),
                ('race', models.PositiveIntegerField(db_column='Race')),
                ('element', models.PositiveIntegerField(db_column='Element')),
                ('mode', models.PositiveIntegerField(db_column='Mode')),
                ('speed', models.PositiveSmallIntegerField(db_column='Speed')),
                ('adelay', models.PositiveSmallIntegerField(db_column='aDelay')),
                ('amotion', models.PositiveSmallIntegerField(db_column='aMotion')),
                ('dmotion', models.PositiveSmallIntegerField(db_column='dMotion')),
                ('mexp', models.PositiveIntegerField(db_column='MEXP')),
                ('mvp1id', models.PositiveSmallIntegerField(db_column='MVP1id')),
                ('mvp1per', models.PositiveSmallIntegerField(db_column='MVP1per')),
                ('mvp2id', models.PositiveSmallIntegerField(db_column='MVP2id')),
                ('mvp2per', models.PositiveSmallIntegerField(db_column='MVP2per')),
                ('mvp3id', models.PositiveSmallIntegerField(db_column='MVP3id')),
                ('mvp3per', models.PositiveSmallIntegerField(db_column='MVP3per')),
                ('drop1id', models.PositiveSmallIntegerField(db_column='Drop1id')),
                ('drop1per', models.PositiveSmallIntegerField(db_column='Drop1per')),
                ('drop2id', models.PositiveSmallIntegerField(db_column='Drop2id')),
                ('drop2per', models.PositiveSmallIntegerField(db_column='Drop2per')),
                ('drop3id', models.PositiveSmallIntegerField(db_column='Drop3id')),
                ('drop3per', models.PositiveSmallIntegerField(db_column='Drop3per')),
                ('drop4id', models.PositiveSmallIntegerField(db_column='Drop4id')),
                ('drop4per', models.PositiveSmallIntegerField(db_column='Drop4per')),
                ('drop5id', models.PositiveSmallIntegerField(db_column='Drop5id')),
                ('drop5per', models.PositiveSmallIntegerField(db_column='Drop5per')),
                ('drop6id', models.PositiveSmallIntegerField(db_column='Drop6id')),
                ('drop6per', models.PositiveSmallIntegerField(db_column='Drop6per')),
                ('drop7id', models.PositiveSmallIntegerField(db_column='Drop7id')),
                ('drop7per', models.PositiveSmallIntegerField(db_column='Drop7per')),
                ('drop8id', models.PositiveSmallIntegerField(db_column='Drop8id')),
                ('drop8per', models.PositiveSmallIntegerField(db_column='Drop8per')),
                ('drop9id', models.PositiveSmallIntegerField(db_column='Drop9id')),
                ('drop9per', models.PositiveSmallIntegerField(db_column='Drop9per')),
                ('dropcardid', models.PositiveSmallIntegerField(db_column='DropCardid')),
                ('dropcardper', models.PositiveSmallIntegerField(db_column='DropCardper')),
            ],
            options={
                'db_table': 'mob_db',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobDb2',
            fields=[
                ('id', models.PositiveIntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('sprite', models.TextField(db_column='Sprite')),
                ('kname', models.TextField(db_column='kName')),
                ('iname', models.TextField(db_column='iName')),
                ('lv', models.PositiveIntegerField(db_column='LV')),
                ('hp', models.PositiveIntegerField(db_column='HP')),
                ('sp', models.PositiveIntegerField(db_column='SP')),
                ('exp', models.PositiveIntegerField(db_column='EXP')),
                ('jexp', models.PositiveIntegerField(db_column='JEXP')),
                ('range1', models.PositiveIntegerField(db_column='Range1')),
                ('atk1', models.PositiveSmallIntegerField(db_column='ATK1')),
                ('atk2', models.PositiveSmallIntegerField(db_column='ATK2')),
                ('def_field', models.PositiveSmallIntegerField(db_column='DEF')),
                ('mdef', models.PositiveSmallIntegerField(db_column='MDEF')),
                ('str', models.PositiveSmallIntegerField(db_column='STR')),
                ('agi', models.PositiveSmallIntegerField(db_column='AGI')),
                ('vit', models.PositiveSmallIntegerField(db_column='VIT')),
                ('int', models.PositiveSmallIntegerField(db_column='INT')),
                ('dex', models.PositiveSmallIntegerField(db_column='DEX')),
                ('luk', models.PositiveSmallIntegerField(db_column='LUK')),
                ('range2', models.PositiveIntegerField(db_column='Range2')),
                ('range3', models.PositiveIntegerField(db_column='Range3')),
                ('scale', models.PositiveIntegerField(db_column='Scale')),
                ('race', models.PositiveIntegerField(db_column='Race')),
                ('element', models.PositiveIntegerField(db_column='Element')),
                ('mode', models.PositiveIntegerField(db_column='Mode')),
                ('speed', models.PositiveSmallIntegerField(db_column='Speed')),
                ('adelay', models.PositiveSmallIntegerField(db_column='aDelay')),
                ('amotion', models.PositiveSmallIntegerField(db_column='aMotion')),
                ('dmotion', models.PositiveSmallIntegerField(db_column='dMotion')),
                ('mexp', models.PositiveIntegerField(db_column='MEXP')),
                ('mvp1id', models.PositiveSmallIntegerField(db_column='MVP1id')),
                ('mvp1per', models.PositiveSmallIntegerField(db_column='MVP1per')),
                ('mvp2id', models.PositiveSmallIntegerField(db_column='MVP2id')),
                ('mvp2per', models.PositiveSmallIntegerField(db_column='MVP2per')),
                ('mvp3id', models.PositiveSmallIntegerField(db_column='MVP3id')),
                ('mvp3per', models.PositiveSmallIntegerField(db_column='MVP3per')),
                ('drop1id', models.PositiveSmallIntegerField(db_column='Drop1id')),
                ('drop1per', models.PositiveSmallIntegerField(db_column='Drop1per')),
                ('drop2id', models.PositiveSmallIntegerField(db_column='Drop2id')),
                ('drop2per', models.PositiveSmallIntegerField(db_column='Drop2per')),
                ('drop3id', models.PositiveSmallIntegerField(db_column='Drop3id')),
                ('drop3per', models.PositiveSmallIntegerField(db_column='Drop3per')),
                ('drop4id', models.PositiveSmallIntegerField(db_column='Drop4id')),
                ('drop4per', models.PositiveSmallIntegerField(db_column='Drop4per')),
                ('drop5id', models.PositiveSmallIntegerField(db_column='Drop5id')),
                ('drop5per', models.PositiveSmallIntegerField(db_column='Drop5per')),
                ('drop6id', models.PositiveSmallIntegerField(db_column='Drop6id')),
                ('drop6per', models.PositiveSmallIntegerField(db_column='Drop6per')),
                ('drop7id', models.PositiveSmallIntegerField(db_column='Drop7id')),
                ('drop7per', models.PositiveSmallIntegerField(db_column='Drop7per')),
                ('drop8id', models.PositiveSmallIntegerField(db_column='Drop8id')),
                ('drop8per', models.PositiveSmallIntegerField(db_column='Drop8per')),
                ('drop9id', models.PositiveSmallIntegerField(db_column='Drop9id')),
                ('drop9per', models.PositiveSmallIntegerField(db_column='Drop9per')),
                ('dropcardid', models.PositiveSmallIntegerField(db_column='DropCardid')),
                ('dropcardper', models.PositiveSmallIntegerField(db_column='DropCardper')),
            ],
            options={
                'db_table': 'mob_db2',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobDb2Re',
            fields=[
                ('id', models.PositiveIntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('sprite', models.TextField(db_column='Sprite')),
                ('kname', models.TextField(db_column='kName')),
                ('iname', models.TextField(db_column='iName')),
                ('lv', models.PositiveIntegerField(db_column='LV')),
                ('hp', models.PositiveIntegerField(db_column='HP')),
                ('sp', models.PositiveIntegerField(db_column='SP')),
                ('exp', models.PositiveIntegerField(db_column='EXP')),
                ('jexp', models.PositiveIntegerField(db_column='JEXP')),
                ('range1', models.PositiveIntegerField(db_column='Range1')),
                ('atk1', models.PositiveSmallIntegerField(db_column='ATK1')),
                ('atk2', models.PositiveSmallIntegerField(db_column='ATK2')),
                ('def_field', models.PositiveSmallIntegerField(db_column='DEF')),
                ('mdef', models.PositiveSmallIntegerField(db_column='MDEF')),
                ('str', models.PositiveSmallIntegerField(db_column='STR')),
                ('agi', models.PositiveSmallIntegerField(db_column='AGI')),
                ('vit', models.PositiveSmallIntegerField(db_column='VIT')),
                ('int', models.PositiveSmallIntegerField(db_column='INT')),
                ('dex', models.PositiveSmallIntegerField(db_column='DEX')),
                ('luk', models.PositiveSmallIntegerField(db_column='LUK')),
                ('range2', models.PositiveIntegerField(db_column='Range2')),
                ('range3', models.PositiveIntegerField(db_column='Range3')),
                ('scale', models.PositiveIntegerField(db_column='Scale')),
                ('race', models.PositiveIntegerField(db_column='Race')),
                ('element', models.PositiveIntegerField(db_column='Element')),
                ('mode', models.PositiveIntegerField(db_column='Mode')),
                ('speed', models.PositiveSmallIntegerField(db_column='Speed')),
                ('adelay', models.PositiveSmallIntegerField(db_column='aDelay')),
                ('amotion', models.PositiveSmallIntegerField(db_column='aMotion')),
                ('dmotion', models.PositiveSmallIntegerField(db_column='dMotion')),
                ('mexp', models.PositiveIntegerField(db_column='MEXP')),
                ('mvp1id', models.PositiveSmallIntegerField(db_column='MVP1id')),
                ('mvp1per', models.PositiveSmallIntegerField(db_column='MVP1per')),
                ('mvp2id', models.PositiveSmallIntegerField(db_column='MVP2id')),
                ('mvp2per', models.PositiveSmallIntegerField(db_column='MVP2per')),
                ('mvp3id', models.PositiveSmallIntegerField(db_column='MVP3id')),
                ('mvp3per', models.PositiveSmallIntegerField(db_column='MVP3per')),
                ('drop1id', models.PositiveSmallIntegerField(db_column='Drop1id')),
                ('drop1per', models.PositiveSmallIntegerField(db_column='Drop1per')),
                ('drop2id', models.PositiveSmallIntegerField(db_column='Drop2id')),
                ('drop2per', models.PositiveSmallIntegerField(db_column='Drop2per')),
                ('drop3id', models.PositiveSmallIntegerField(db_column='Drop3id')),
                ('drop3per', models.PositiveSmallIntegerField(db_column='Drop3per')),
                ('drop4id', models.PositiveSmallIntegerField(db_column='Drop4id')),
                ('drop4per', models.PositiveSmallIntegerField(db_column='Drop4per')),
                ('drop5id', models.PositiveSmallIntegerField(db_column='Drop5id')),
                ('drop5per', models.PositiveSmallIntegerField(db_column='Drop5per')),
                ('drop6id', models.PositiveSmallIntegerField(db_column='Drop6id')),
                ('drop6per', models.PositiveSmallIntegerField(db_column='Drop6per')),
                ('drop7id', models.PositiveSmallIntegerField(db_column='Drop7id')),
                ('drop7per', models.PositiveSmallIntegerField(db_column='Drop7per')),
                ('drop8id', models.PositiveSmallIntegerField(db_column='Drop8id')),
                ('drop8per', models.PositiveSmallIntegerField(db_column='Drop8per')),
                ('drop9id', models.PositiveSmallIntegerField(db_column='Drop9id')),
                ('drop9per', models.PositiveSmallIntegerField(db_column='Drop9per')),
                ('dropcardid', models.PositiveSmallIntegerField(db_column='DropCardid')),
                ('dropcardper', models.PositiveSmallIntegerField(db_column='DropCardper')),
            ],
            options={
                'db_table': 'mob_db2_re',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobDbRe',
            fields=[
                ('id', models.PositiveIntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('sprite', models.TextField(db_column='Sprite')),
                ('kname', models.TextField(db_column='kName')),
                ('iname', models.TextField(db_column='iName')),
                ('lv', models.PositiveIntegerField(db_column='LV')),
                ('hp', models.PositiveIntegerField(db_column='HP')),
                ('sp', models.PositiveIntegerField(db_column='SP')),
                ('exp', models.PositiveIntegerField(db_column='EXP')),
                ('jexp', models.PositiveIntegerField(db_column='JEXP')),
                ('range1', models.PositiveIntegerField(db_column='Range1')),
                ('atk1', models.PositiveSmallIntegerField(db_column='ATK1')),
                ('atk2', models.PositiveSmallIntegerField(db_column='ATK2')),
                ('def_field', models.PositiveSmallIntegerField(db_column='DEF')),
                ('mdef', models.PositiveSmallIntegerField(db_column='MDEF')),
                ('str', models.PositiveSmallIntegerField(db_column='STR')),
                ('agi', models.PositiveSmallIntegerField(db_column='AGI')),
                ('vit', models.PositiveSmallIntegerField(db_column='VIT')),
                ('int', models.PositiveSmallIntegerField(db_column='INT')),
                ('dex', models.PositiveSmallIntegerField(db_column='DEX')),
                ('luk', models.PositiveSmallIntegerField(db_column='LUK')),
                ('range2', models.PositiveIntegerField(db_column='Range2')),
                ('range3', models.PositiveIntegerField(db_column='Range3')),
                ('scale', models.PositiveIntegerField(db_column='Scale')),
                ('race', models.PositiveIntegerField(db_column='Race')),
                ('element', models.PositiveIntegerField(db_column='Element')),
                ('mode', models.PositiveIntegerField(db_column='Mode')),
                ('speed', models.PositiveSmallIntegerField(db_column='Speed')),
                ('adelay', models.PositiveSmallIntegerField(db_column='aDelay')),
                ('amotion', models.PositiveSmallIntegerField(db_column='aMotion')),
                ('dmotion', models.PositiveSmallIntegerField(db_column='dMotion')),
                ('mexp', models.PositiveIntegerField(db_column='MEXP')),
                ('mvp1id', models.PositiveSmallIntegerField(db_column='MVP1id')),
                ('mvp1per', models.PositiveSmallIntegerField(db_column='MVP1per')),
                ('mvp2id', models.PositiveSmallIntegerField(db_column='MVP2id')),
                ('mvp2per', models.PositiveSmallIntegerField(db_column='MVP2per')),
                ('mvp3id', models.PositiveSmallIntegerField(db_column='MVP3id')),
                ('mvp3per', models.PositiveSmallIntegerField(db_column='MVP3per')),
                ('drop1id', models.PositiveSmallIntegerField(db_column='Drop1id')),
                ('drop1per', models.PositiveSmallIntegerField(db_column='Drop1per')),
                ('drop2id', models.PositiveSmallIntegerField(db_column='Drop2id')),
                ('drop2per', models.PositiveSmallIntegerField(db_column='Drop2per')),
                ('drop3id', models.PositiveSmallIntegerField(db_column='Drop3id')),
                ('drop3per', models.PositiveSmallIntegerField(db_column='Drop3per')),
                ('drop4id', models.PositiveSmallIntegerField(db_column='Drop4id')),
                ('drop4per', models.PositiveSmallIntegerField(db_column='Drop4per')),
                ('drop5id', models.PositiveSmallIntegerField(db_column='Drop5id')),
                ('drop5per', models.PositiveSmallIntegerField(db_column='Drop5per')),
                ('drop6id', models.PositiveSmallIntegerField(db_column='Drop6id')),
                ('drop6per', models.PositiveSmallIntegerField(db_column='Drop6per')),
                ('drop7id', models.PositiveSmallIntegerField(db_column='Drop7id')),
                ('drop7per', models.PositiveSmallIntegerField(db_column='Drop7per')),
                ('drop8id', models.PositiveSmallIntegerField(db_column='Drop8id')),
                ('drop8per', models.PositiveSmallIntegerField(db_column='Drop8per')),
                ('drop9id', models.PositiveSmallIntegerField(db_column='Drop9id')),
                ('drop9per', models.PositiveSmallIntegerField(db_column='Drop9per')),
                ('dropcardid', models.PositiveSmallIntegerField(db_column='DropCardid')),
                ('dropcardper', models.PositiveSmallIntegerField(db_column='DropCardper')),
            ],
            options={
                'db_table': 'mob_db_re',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobSkillDb2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mob_id', models.SmallIntegerField(db_column='MOB_ID')),
                ('info', models.TextField(db_column='INFO')),
                ('state', models.TextField(db_column='STATE')),
                ('skill_id', models.SmallIntegerField(db_column='SKILL_ID')),
                ('skill_lv', models.IntegerField(db_column='SKILL_LV')),
                ('rate', models.SmallIntegerField(db_column='RATE')),
                ('casttime', models.IntegerField(db_column='CASTTIME')),
                ('delay', models.IntegerField(db_column='DELAY')),
                ('cancelable', models.TextField(db_column='CANCELABLE')),
                ('target', models.TextField(db_column='TARGET')),
                ('condition', models.TextField(db_column='CONDITION')),
                ('condition_value', models.TextField(blank=True, db_column='CONDITION_VALUE', null=True)),
                ('val1', models.IntegerField(blank=True, db_column='VAL1', null=True)),
                ('val2', models.IntegerField(blank=True, db_column='VAL2', null=True)),
                ('val3', models.IntegerField(blank=True, db_column='VAL3', null=True)),
                ('val4', models.IntegerField(blank=True, db_column='VAL4', null=True)),
                ('val5', models.IntegerField(blank=True, db_column='VAL5', null=True)),
                ('emotion', models.TextField(blank=True, db_column='EMOTION', null=True)),
                ('chat', models.TextField(blank=True, db_column='CHAT', null=True)),
            ],
            options={
                'db_table': 'mob_skill_db2',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobSkillDb2Re',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mob_id', models.SmallIntegerField(db_column='MOB_ID')),
                ('info', models.TextField(db_column='INFO')),
                ('state', models.TextField(db_column='STATE')),
                ('skill_id', models.SmallIntegerField(db_column='SKILL_ID')),
                ('skill_lv', models.IntegerField(db_column='SKILL_LV')),
                ('rate', models.SmallIntegerField(db_column='RATE')),
                ('casttime', models.IntegerField(db_column='CASTTIME')),
                ('delay', models.IntegerField(db_column='DELAY')),
                ('cancelable', models.TextField(db_column='CANCELABLE')),
                ('target', models.TextField(db_column='TARGET')),
                ('condition', models.TextField(db_column='CONDITION')),
                ('condition_value', models.TextField(blank=True, db_column='CONDITION_VALUE', null=True)),
                ('val1', models.IntegerField(blank=True, db_column='VAL1', null=True)),
                ('val2', models.IntegerField(blank=True, db_column='VAL2', null=True)),
                ('val3', models.IntegerField(blank=True, db_column='VAL3', null=True)),
                ('val4', models.IntegerField(blank=True, db_column='VAL4', null=True)),
                ('val5', models.IntegerField(blank=True, db_column='VAL5', null=True)),
                ('emotion', models.TextField(blank=True, db_column='EMOTION', null=True)),
                ('chat', models.TextField(blank=True, db_column='CHAT', null=True)),
            ],
            options={
                'db_table': 'mob_skill_db2_re',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobSkillDbRe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mob_id', models.SmallIntegerField(db_column='MOB_ID')),
                ('info', models.TextField(db_column='INFO')),
                ('state', models.TextField(db_column='STATE')),
                ('skill_id', models.SmallIntegerField(db_column='SKILL_ID')),
                ('skill_lv', models.IntegerField(db_column='SKILL_LV')),
                ('rate', models.SmallIntegerField(db_column='RATE')),
                ('casttime', models.IntegerField(db_column='CASTTIME')),
                ('delay', models.IntegerField(db_column='DELAY')),
                ('cancelable', models.TextField(db_column='CANCELABLE')),
                ('target', models.TextField(db_column='TARGET')),
                ('condition', models.TextField(db_column='CONDITION')),
                ('condition_value', models.TextField(blank=True, db_column='CONDITION_VALUE', null=True)),
                ('val1', models.IntegerField(blank=True, db_column='VAL1', null=True)),
                ('val2', models.IntegerField(blank=True, db_column='VAL2', null=True)),
                ('val3', models.IntegerField(blank=True, db_column='VAL3', null=True)),
                ('val4', models.IntegerField(blank=True, db_column='VAL4', null=True)),
                ('val5', models.IntegerField(blank=True, db_column='VAL5', null=True)),
                ('emotion', models.TextField(blank=True, db_column='EMOTION', null=True)),
                ('chat', models.TextField(blank=True, db_column='CHAT', null=True)),
            ],
            options={
                'db_table': 'mob_skill_db_re',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mvplog',
            fields=[
                ('mvp_id', models.AutoField(primary_key=True, serialize=False)),
                ('mvp_date', models.DateTimeField()),
                ('kill_char_id', models.IntegerField()),
                ('monster_id', models.SmallIntegerField()),
                ('prize', models.PositiveSmallIntegerField()),
                ('mvpexp', models.BigIntegerField()),
                ('map', models.CharField(max_length=11)),
            ],
            options={
                'db_table': 'mvplog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Npclog',
            fields=[
                ('npc_id', models.AutoField(primary_key=True, serialize=False)),
                ('npc_date', models.DateTimeField()),
                ('account_id', models.PositiveIntegerField()),
                ('char_id', models.PositiveIntegerField()),
                ('char_name', models.CharField(max_length=25)),
                ('map', models.CharField(max_length=11)),
                ('mes', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'npclog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('party_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=24)),
                ('exp', models.PositiveIntegerField()),
                ('item', models.PositiveIntegerField()),
                ('leader_id', models.PositiveIntegerField()),
                ('leader_char', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'party',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('pet_id', models.AutoField(primary_key=True, serialize=False)),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('name', models.CharField(max_length=24)),
                ('account_id', models.PositiveIntegerField()),
                ('char_id', models.PositiveIntegerField()),
                ('level', models.PositiveSmallIntegerField()),
                ('egg_id', models.PositiveSmallIntegerField()),
                ('equip', models.PositiveIntegerField()),
                ('intimate', models.PositiveSmallIntegerField()),
                ('hungry', models.PositiveSmallIntegerField()),
                ('rename_flag', models.PositiveIntegerField()),
                ('incubate', models.PositiveIntegerField()),
                ('autofeed', models.IntegerField()),
            ],
            options={
                'db_table': 'pet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Picklog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('char_id', models.IntegerField()),
                ('type', models.CharField(max_length=1)),
                ('nameid', models.PositiveSmallIntegerField()),
                ('amount', models.IntegerField()),
                ('refine', models.PositiveIntegerField()),
                ('card0', models.PositiveSmallIntegerField()),
                ('card1', models.PositiveSmallIntegerField()),
                ('card2', models.PositiveSmallIntegerField()),
                ('card3', models.PositiveSmallIntegerField()),
                ('option_id0', models.SmallIntegerField()),
                ('option_val0', models.SmallIntegerField()),
                ('option_parm0', models.IntegerField()),
                ('option_id1', models.SmallIntegerField()),
                ('option_val1', models.SmallIntegerField()),
                ('option_parm1', models.IntegerField()),
                ('option_id2', models.SmallIntegerField()),
                ('option_val2', models.SmallIntegerField()),
                ('option_parm2', models.IntegerField()),
                ('option_id3', models.SmallIntegerField()),
                ('option_val3', models.SmallIntegerField()),
                ('option_parm3', models.IntegerField()),
                ('option_id4', models.SmallIntegerField()),
                ('option_val4', models.SmallIntegerField()),
                ('option_parm4', models.IntegerField()),
                ('unique_id', models.BigIntegerField()),
                ('map', models.CharField(max_length=11)),
                ('bound', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'picklog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('char_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest_id', models.PositiveIntegerField()),
                ('state', models.CharField(max_length=1)),
                ('time', models.PositiveIntegerField()),
                ('count1', models.PositiveIntegerField()),
                ('count2', models.PositiveIntegerField()),
                ('count3', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'quest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ragsrvinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('exp', models.PositiveIntegerField()),
                ('jexp', models.PositiveIntegerField()),
                ('drop', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'ragsrvinfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sales',
            fields=[
                ('nameid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('amount', models.IntegerField()),
            ],
            options={
                'db_table': 'sales',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ScData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_id', models.PositiveIntegerField()),
                ('char_id', models.PositiveIntegerField()),
                ('type', models.PositiveSmallIntegerField()),
                ('tick', models.BigIntegerField()),
                ('val1', models.IntegerField()),
                ('val2', models.IntegerField()),
                ('val3', models.IntegerField()),
                ('val4', models.IntegerField()),
            ],
            options={
                'db_table': 'sc_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('char_id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('id', models.PositiveSmallIntegerField()),
                ('lv', models.PositiveIntegerField()),
                ('flag', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'skill',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Skillcooldown',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_id', models.PositiveIntegerField()),
                ('char_id', models.PositiveIntegerField()),
                ('skill', models.PositiveSmallIntegerField()),
                ('tick', models.BigIntegerField()),
            ],
            options={
                'db_table': 'skillcooldown',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkillHomunculus',
            fields=[
                ('homun_id', models.IntegerField(primary_key=True, serialize=False)),
                ('id', models.IntegerField()),
                ('lv', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'skill_homunculus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sstatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=255)),
                ('user', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'sstatus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_id', models.PositiveIntegerField()),
                ('nameid', models.PositiveSmallIntegerField()),
                ('amount', models.PositiveSmallIntegerField()),
                ('equip', models.PositiveIntegerField()),
                ('identify', models.PositiveSmallIntegerField()),
                ('refine', models.PositiveIntegerField()),
                ('attribute', models.PositiveIntegerField()),
                ('card0', models.PositiveSmallIntegerField()),
                ('card1', models.PositiveSmallIntegerField()),
                ('card2', models.PositiveSmallIntegerField()),
                ('card3', models.PositiveSmallIntegerField()),
                ('option_id0', models.SmallIntegerField()),
                ('option_val0', models.SmallIntegerField()),
                ('option_parm0', models.IntegerField()),
                ('option_id1', models.SmallIntegerField()),
                ('option_val1', models.SmallIntegerField()),
                ('option_parm1', models.IntegerField()),
                ('option_id2', models.SmallIntegerField()),
                ('option_val2', models.SmallIntegerField()),
                ('option_parm2', models.IntegerField()),
                ('option_id3', models.SmallIntegerField()),
                ('option_val3', models.SmallIntegerField()),
                ('option_parm3', models.IntegerField()),
                ('option_id4', models.SmallIntegerField()),
                ('option_val4', models.SmallIntegerField()),
                ('option_parm4', models.IntegerField()),
                ('expire_time', models.PositiveIntegerField()),
                ('bound', models.PositiveIntegerField()),
                ('unique_id', models.BigIntegerField()),
            ],
            options={
                'db_table': 'storage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VendingItems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vending_id', models.PositiveIntegerField()),
                ('index', models.PositiveSmallIntegerField()),
                ('cartinventory_id', models.PositiveIntegerField()),
                ('amount', models.PositiveSmallIntegerField()),
                ('price', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'vending_items',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Vendings',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('account_id', models.PositiveIntegerField()),
                ('char_id', models.PositiveIntegerField()),
                ('sex', models.CharField(max_length=1)),
                ('map', models.CharField(max_length=20)),
                ('x', models.PositiveSmallIntegerField()),
                ('y', models.PositiveSmallIntegerField()),
                ('title', models.CharField(max_length=80)),
                ('body_direction', models.CharField(max_length=1)),
                ('head_direction', models.CharField(max_length=1)),
                ('sit', models.CharField(max_length=1)),
                ('autotrade', models.IntegerField()),
            ],
            options={
                'db_table': 'vendings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Zenylog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('char_id', models.IntegerField()),
                ('src_id', models.IntegerField()),
                ('type', models.CharField(max_length=1)),
                ('amount', models.IntegerField()),
                ('map', models.CharField(max_length=11)),
            ],
            options={
                'db_table': 'zenylog',
                'managed': False,
            },
        ),
    ]
